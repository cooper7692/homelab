services:
  postgres:
    image: docker.io/library/postgres:16-alpine
    container_name: ak-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
    - ak_db:/var/lib/postgresql/data
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${PG_USER} -d ${PG_DB}
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s
    networks:
    - traefik
    - ak_internal
  redis:
    image: docker.io/library/redis:7-alpine
    container_name: ak-redis
    restart: unless-stopped
    command:
    - redis-server
    - --save
    - ''
    - --appendonly
    - false
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 3s
      retries: 15
    networks:
    - traefik
    - ak_internal
  authentik:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_EXTERNAL_URL: ${AUTHENTIK_EXTERNAL_URL}
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__PORT: 5432
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASSWORD}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
      AUTHENTIK_LISTEN__HTTP: 0.0.0.0:9000
      AUTHENTIK_DISABLE_HTTPS: 'true'
      AUTHENTIK_USE_X_FORWARDED_HOST: 'true'
      AUTHENTIK_SECURE_PROXY_SSL_HEADER: HTTP_X_FORWARDED_PROTO,https
    volumes:
    - ak_media:/media
    - ak_templates:/templates
    ports:
    - 9000:9000
    healthcheck:
      test:
      - CMD-SHELL
      - ''
